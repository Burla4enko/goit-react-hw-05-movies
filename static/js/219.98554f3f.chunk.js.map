{"version":3,"file":"static/js/219.98554f3f.chunk.js","mappings":"sRAEaA,EAAWC,EAAAA,GAAAA,GAAH,8DAKRC,EAAWD,EAAAA,GAAAA,GAAH,iHAORE,EAAWF,EAAAA,GAAAA,IAAH,yC,mBCPN,SAASG,IACtB,IACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GACb,IAAME,EAAO,mCAAG,oGAEZF,GAAa,GAFD,UAGkBG,EAAAA,EAAAA,IAXvB,QAW6CX,GAHxC,8BAGkDY,KAAKC,KAHvD,OAGNC,EAHM,OAIZV,EAASU,GAJG,kDAMZR,GAAS,GACTE,GAAa,GAPD,0DAAH,qDAWbE,GACD,GAAE,CAACV,KAGF,8BACoB,IAAjBG,EAAMY,QAAiBV,GAAUE,GAGhC,SAACZ,EAAD,UACGQ,EAAMa,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,KAAMC,EAAuC,EAAvCA,UAAWC,EAA4B,EAA5BA,aAAcC,EAAc,EAAdA,QAC3C,OACE,UAACvB,EAAD,YACE,gBACEwB,IAAKF,EAAeG,EAAAA,GAAeH,EAAeI,EAClDC,IAAKP,EAAO,YAEd,UAACnB,EAAD,YACE,wBACE,uBAAImB,MAELC,IACC,0BACE,uCACCA,UAZME,EAkBlB,OAvBH,oEA4BP,C,2KC3DKK,EAAW,+BACXC,EAAU,mCACHJ,EAAe,mCAEfK,EAAY,WAA8C,IAA7CC,EAA4C,uDAArC,WAAYC,EAAyB,uDAAjB,GAAIC,EAAa,uDAAN,EAC1DC,EAAO,GAEX,OAAQH,GACN,IAAK,WAGH,OADAG,EAAO,qBACAC,EAAAA,EAAAA,IAAA,UAAaP,EAAb,YAAyBM,EAAzB,oBAAyCL,EAAzC,iBAAyDI,IAElE,IAAK,SAGH,OADAC,EAAO,gBACAC,EAAAA,EAAAA,IAAA,UACFP,EADE,YACUM,EADV,oBAC0BL,EAD1B,iBAC0CI,EAD1C,kBACwDD,IAMpE,EAEYI,EAAY,mCAAG,WAAMC,GAAN,8EACpBH,EADoB,iBACHG,GADG,kBAEnBF,EAAAA,EAAAA,IAAA,UAAaP,EAAb,YAAyBM,EAAzB,oBAAyCL,KAFtB,2CAAH,sDAKZf,EAAkB,SAACiB,EAAMM,GACpC,IAAIH,EAAO,GACX,OAAQH,GACN,IAAK,QACHG,EAAI,iBAAaG,EAAb,YACJ,MAEF,IAAK,UACHH,EAAI,gBAAYG,EAAZ,YACJ,MAEF,QACE,MAAM,IAAIC,MAAM,2BAEpB,OAAOH,EAAAA,EAAAA,IAAA,UAAaP,EAAb,YAAyBM,EAAzB,oBAAyCL,GACjD,C","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.js","utils/fetch-movies.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const CastItem = styled.li`\n  display: flex;\n  flex-direction: column;\n  padding: 20px;\n  width: calc(100% / 5);\n`;\n\nexport const CastName = styled.div`\n  flex-grow: 1;\n`;\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'utils/fetch-movies';\nimport { BASE_IMG_URL } from 'utils/fetch-movies';\nimport { CastItem, CastList, CastName } from './Cast.styled';\nimport placeholder from '../../images/person-placeholder.jpg';\n\nexport default function Casts() {\n  const type = 'casts';\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getCast = async () => {\n      try {\n        setIsLoading(false);\n        const castList = await (await getMovieDetails(type, movieId)).data.cast;\n        setCasts(castList);\n      } catch {\n        setError(true);\n        setIsLoading(false);\n      }\n    };\n\n    getCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {casts.length === 0 && !error && !isLoading ? (\n        <p>I'm sorry, but we didn't find anything.</p>\n      ) : (\n        <CastList>\n          {casts.map(({ name, character, profile_path, cast_id }) => {\n            return (\n              <CastItem key={cast_id}>\n                <img\n                  src={profile_path ? BASE_IMG_URL + profile_path : placeholder}\n                  alt={name + ' photo'}\n                />\n                <CastName>\n                  <p>\n                    <b>{name}</b>\n                  </p>\n                  {character && (\n                    <p>\n                      <b>Character: </b>\n                      {character}\n                    </p>\n                  )}\n                </CastName>\n              </CastItem>\n            );\n          })}\n        </CastList>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '32561021188665f103817e2a950fe3f2';\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500/';\n\nexport const getMovies = (type = 'trending', query = '', page = 1) => {\n  let path = '';\n\n  switch (type) {\n    case 'trending':\n      // console.log('trending');\n      path = 'trending/movie/day';\n      return axios.get(`${BASE_URL}/${path}?api_key=${API_KEY}&page=${page}`);\n\n    case 'search':\n      // console.log('search');\n      path = '/search/movie';\n      return axios.get(\n        `${BASE_URL}/${path}?api_key=${API_KEY}&page=${page}&query=${query}`\n      );\n\n    default:\n      break;\n  }\n};\n\nexport const getMovieById = async id => {\n  const path = `/movie/${id}`;\n  return axios.get(`${BASE_URL}/${path}?api_key=${API_KEY}`);\n};\n\nexport const getMovieDetails = (type, id) => {\n  let path = '';\n  switch (type) {\n    case 'casts':\n      path = `/movie/${id}/credits`;\n      break;\n\n    case 'reviews':\n      path = `movie/${id}/reviews`;\n      break;\n\n    default:\n      throw new Error('Invalid type of details');\n  }\n  return axios.get(`${BASE_URL}/${path}?api_key=${API_KEY}`);\n};\n"],"names":["CastList","styled","CastItem","CastName","Casts","movieId","useParams","useState","casts","setCasts","error","setError","isLoading","setIsLoading","useEffect","getCast","getMovieDetails","data","cast","castList","length","map","name","character","profile_path","cast_id","src","BASE_IMG_URL","placeholder","alt","BASE_URL","API_KEY","getMovies","type","query","page","path","axios","getMovieById","id","Error"],"sourceRoot":""}