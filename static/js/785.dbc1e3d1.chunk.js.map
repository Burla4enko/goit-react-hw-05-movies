{"version":3,"file":"static/js/785.dbc1e3d1.chunk.js","mappings":"sQAIe,SAASA,IACtB,IACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAA0BF,EAAAA,EAAAA,WAAS,GAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACRD,GAAa,GACb,IAAME,EAAU,mCAAG,oGAEfF,GAAa,GAFE,UAIPG,EAAAA,EAAAA,IAZD,UAYuBX,GAJf,8BAKbY,KAAKC,QALQ,qCAGTC,EAHS,OAMfV,EAAWU,GANI,kDAQfR,GAAS,GACTE,GAAa,GATE,0DAAH,qDAahBE,GACD,GAAE,CAACV,KAGF,8BACsB,IAAnBG,EAAQY,QAAiBV,GAAUE,GAGlC,wBACGJ,EAAQa,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,OAAQC,EAAkB,EAAlBA,QAASC,EAAS,EAATA,GAC/B,OACE,2BACE,wBACE,oCAAYF,QAEd,uBAAIC,MAJGC,EAOZ,OAZH,oEAiBP,C,2KC/CKC,EAAW,+BACXC,EAAU,mCACHC,EAAe,mCAEfC,EAAY,WAA8C,IAA7CC,EAA4C,uDAArC,WAAYC,EAAyB,uDAAjB,GAAIC,EAAa,uDAAN,EAC1DC,EAAO,GAEX,OAAQH,GACN,IAAK,WAGH,OADAG,EAAO,qBACAC,EAAAA,EAAAA,IAAA,UAAaR,EAAb,YAAyBO,EAAzB,oBAAyCN,EAAzC,iBAAyDK,IAElE,IAAK,SAGH,OADAC,EAAO,gBACAC,EAAAA,EAAAA,IAAA,UACFR,EADE,YACUO,EADV,oBAC0BN,EAD1B,iBAC0CK,EAD1C,kBACwDD,IAMpE,EAEYI,EAAY,mCAAG,WAAMV,GAAN,8EACpBQ,EADoB,iBACHR,GADG,kBAEnBS,EAAAA,EAAAA,IAAA,UAAaR,EAAb,YAAyBO,EAAzB,oBAAyCN,KAFtB,2CAAH,sDAKZV,EAAkB,SAACa,EAAML,GACpC,IAAIQ,EAAO,GACX,OAAQH,GACN,IAAK,QACHG,EAAI,iBAAaR,EAAb,YACJ,MAEF,IAAK,UACHQ,EAAI,gBAAYR,EAAZ,YACJ,MAEF,QACE,MAAM,IAAIW,MAAM,2BAEpB,OAAOF,EAAAA,EAAAA,IAAA,UAAaR,EAAb,YAAyBO,EAAzB,oBAAyCN,GACjD,C","sources":["components/Reviews/Reviews.js","utils/fetch-movies.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getMovieDetails } from 'utils/fetch-movies';\n\nexport default function Reviews() {\n  const type = 'reviews';\n  const { movieId } = useParams();\n  const [reviews, setReviews] = useState([]);\n  const [error, setError] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    const getReviews = async () => {\n      try {\n        setIsLoading(false);\n        const reviewsList = await await (\n          await getMovieDetails(type, movieId)\n        ).data.results;\n        setReviews(reviewsList);\n      } catch {\n        setError(true);\n        setIsLoading(false);\n      }\n    };\n\n    getReviews();\n  }, [movieId]);\n\n  return (\n    <>\n      {reviews.length === 0 && !error && !isLoading ? (\n        <p>I'm sorry, but we didn't find anything.</p>\n      ) : (\n        <ul>\n          {reviews.map(({ author, content, id }) => {\n            return (\n              <li key={id}>\n                <p>\n                  <b>Author: {author}</b>\n                </p>\n                <p>{content}</p>\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '32561021188665f103817e2a950fe3f2';\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500/';\n\nexport const getMovies = (type = 'trending', query = '', page = 1) => {\n  let path = '';\n\n  switch (type) {\n    case 'trending':\n      // console.log('trending');\n      path = 'trending/movie/day';\n      return axios.get(`${BASE_URL}/${path}?api_key=${API_KEY}&page=${page}`);\n\n    case 'search':\n      // console.log('search');\n      path = '/search/movie';\n      return axios.get(\n        `${BASE_URL}/${path}?api_key=${API_KEY}&page=${page}&query=${query}`\n      );\n\n    default:\n      break;\n  }\n};\n\nexport const getMovieById = async id => {\n  const path = `/movie/${id}`;\n  return axios.get(`${BASE_URL}/${path}?api_key=${API_KEY}`);\n};\n\nexport const getMovieDetails = (type, id) => {\n  let path = '';\n  switch (type) {\n    case 'casts':\n      path = `/movie/${id}/credits`;\n      break;\n\n    case 'reviews':\n      path = `movie/${id}/reviews`;\n      break;\n\n    default:\n      throw new Error('Invalid type of details');\n  }\n  return axios.get(`${BASE_URL}/${path}?api_key=${API_KEY}`);\n};\n"],"names":["Reviews","movieId","useParams","useState","reviews","setReviews","error","setError","isLoading","setIsLoading","useEffect","getReviews","getMovieDetails","data","results","reviewsList","length","map","author","content","id","BASE_URL","API_KEY","BASE_IMG_URL","getMovies","type","query","page","path","axios","getMovieById","Error"],"sourceRoot":""}