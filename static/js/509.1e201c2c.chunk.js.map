{"version":3,"file":"static/js/509.1e201c2c.chunk.js","mappings":"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","sources":["components/MoviesList/MoviesList.styled.js","components/MoviesList/MoviesList.js","components/Searchbar/Searchbar.styled.js","components/Searchbar/Searchbar.js","pages/Movies/Movies.js","utils/fetch-movies.js"],"sourcesContent":["import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const MoviesListUl = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n  justify-content: center;\n  gap: 16px;\n  margin-bottom: 20px;\n`;\n\nexport const MoviesItem = styled.li`\n  width: calc((100% / 3) - 32px);\n  padding-bottom: 8px;\n  border-radius: 2px;\n  box-shadow: 0px 1px 3px 0px rgba(0, 0, 0, 0.2),\n    0px 1px 1px 0px rgba(0, 0, 0, 0.14), 0px 2px 1px -1px rgba(0, 0, 0, 0.12);\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  :hover {\n    transform: scale(1.03);\n  }\n\n  img {\n    display: block;\n    width: 100%;\n    height: auto;\n    margin-bottom: 8px;\n    object-fit: contain;\n  }\n\n  span {\n    padding: 4px 8px;\n  }\n`;\n\nexport const StyledLink = styled(Link)`\n  text-decoration: none;\n  font-weight: 500;\n  color: black;\n`;\n","import PropTypes from 'prop-types';\nimport { useLocation } from 'react-router-dom';\nimport { BASE_IMG_URL } from 'utils/fetch-movies';\nimport { MoviesItem, MoviesListUl, StyledLink } from './MoviesList.styled';\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n\n  return (\n    <MoviesListUl>\n      {movies.map(({ id, title, backdrop_path, poster_path }) => {\n        return (\n          <MoviesItem key={id}>\n            <StyledLink to={`/movies/${id}`} state={{ from: location }}>\n              <img\n                src={\n                  poster_path\n                    ? BASE_IMG_URL + poster_path\n                    : BASE_IMG_URL + backdrop_path\n                }\n                alt={`Poster: ${title}`}\n              />\n              <span>{title}</span>\n            </StyledLink>\n          </MoviesItem>\n        );\n      })}\n    </MoviesListUl>\n  );\n};\n\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(PropTypes.shape().isRequired).isRequired,\n};\n","import styled from 'styled-components';\n\nexport const SearchForm = styled.form`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin: 20px auto;\n  width: 100%;\n  max-width: 600px;\n  background-color: #fff;\n  border-radius: 3px;\n`;\n\nexport const SearchFormButton = styled.button`\n  display: inline-block;\n  width: 48px;\n  height: 48px;\n  border: 0;\n  background-image: url('https://image.flaticon.com/icons/svg/149/149852.svg');\n  background-size: 40%;\n  background-repeat: no-repeat;\n  background-position: center;\n  opacity: 0.6;\n  transition: opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  cursor: pointer;\n  outline: none;\n  :hover,\n  :focus {\n    opacity: 1;\n  }\n`;\n\nexport const SearchFormBtnLabel = styled.span`\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  white-space: nowrap;\n  clip-path: inset(50%);\n  border: 0;\n`;\n\nexport const SearchFormInput = styled.input`\n  display: inline-block;\n  width: 100%;\n  font: inherit;\n  font-size: 20px;\n  border: none;\n  outline: none;\n  padding-left: 4px;\n  padding-right: 4px;\n  ::placeholder {\n    font: inherit;\n    font-size: 18px;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { GoSearch } from 'react-icons/go';\nimport { useSearchParams } from 'react-router-dom';\nimport { useState } from 'react';\nimport {\n  SearchForm,\n  SearchFormButton,\n  SearchFormBtnLabel,\n  SearchFormInput,\n} from './Searchbar.styled';\n\nexport const Searchbar = ({ onSubmit }) => {\n  const [searchParams] = useSearchParams();\n  const [query, setQuery] = useState(searchParams.get('title') ?? '');\n\n  return (\n    <SearchForm onSubmit={onSubmit}>\n      <SearchFormButton type=\"submit\">\n        <SearchFormBtnLabel>search</SearchFormBtnLabel>\n        <GoSearch size=\"24\" />\n      </SearchFormButton>\n      <SearchFormInput\n        type=\"text\"\n        name=\"search\"\n        value={query}\n        autocomplete=\"off\"\n        autoFocus\n        placeholder=\"Search movies\"\n        onChange={e => setQuery(e.target.value)}\n      />\n    </SearchForm>\n  );\n};\n\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast, Toaster } from 'react-hot-toast';\nimport { MoviesList } from 'components/MoviesList/MoviesList';\nimport { Searchbar } from 'components/Searchbar/Searchbar';\nimport { getMovies } from 'utils/fetch-movies';\n\nexport default function Movies() {\n  const [movies, setMovies] = useState([]);\n  const [query, setQuery] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams('');\n  const type = 'search';\n\n  useEffect(() => {\n    const title = searchParams.get('title') ?? '';\n    title && setQuery(title);\n  }, [searchParams]);\n\n  useEffect(() => {\n    const searchMovies = async () => {\n      const newMovies = await (await getMovies(type, query)).data.results;\n      if (newMovies.length === 0) {\n        return toast.error('WTF?');\n      }\n      setMovies(newMovies);\n    };\n    query && searchMovies();\n  }, [query]);\n\n  const onSubmit = e => {\n    e.preventDefault();\n\n    const formQuery = e.target.elements.search.value.toLowerCase().trim();\n\n    if (formQuery.length === 0) {\n      return toast.error('Please, enter something.');\n    }\n\n    if (formQuery === query) {\n      return toast.error('Please, enter something else...');\n    }\n\n    setMovies([]);\n    setQuery(formQuery);\n    formQuery && setSearchParams({ title: formQuery });\n  };\n  return (\n    <>\n      <Toaster />\n      <Searchbar value={query} onSubmit={onSubmit} />\n      {movies.length > 0 && <MoviesList movies={movies} />}\n    </>\n  );\n}\n","import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3';\nconst API_KEY = '32561021188665f103817e2a950fe3f2';\nexport const BASE_IMG_URL = 'https://image.tmdb.org/t/p/w500/';\n\nexport const getMovies = (type = 'trending', query = '', page = 1) => {\n  let path = '';\n\n  switch (type) {\n    case 'trending':\n      // console.log('trending');\n      path = 'trending/movie/day';\n      return axios.get(`${BASE_URL}/${path}?api_key=${API_KEY}&page=${page}`);\n\n    case 'search':\n      // console.log('search');\n      path = '/search/movie';\n      return axios.get(\n        `${BASE_URL}/${path}?api_key=${API_KEY}&page=${page}&query=${query}`\n      );\n\n    default:\n      break;\n  }\n};\n\nexport const getMovieById = async id => {\n  const path = `/movie/${id}`;\n  return axios.get(`${BASE_URL}/${path}?api_key=${API_KEY}`);\n};\n\nexport const getMovieDetails = (type, id) => {\n  let path = '';\n  switch (type) {\n    case 'casts':\n      path = `/movie/${id}/credits`;\n      break;\n\n    case 'reviews':\n      path = `movie/${id}/reviews`;\n      break;\n\n    default:\n      throw new Error('Invalid type of details');\n  }\n  return axios.get(`${BASE_URL}/${path}?api_key=${API_KEY}`);\n};\n"],"names":["MoviesListUl","styled","MoviesItem","StyledLink","Link","MoviesList","movies","location","useLocation","map","id","title","backdrop_path","poster_path","to","state","from","src","BASE_IMG_URL","alt","SearchForm","SearchFormButton","SearchFormBtnLabel","SearchFormInput","Searchbar","onSubmit","useSearchParams","searchParams","useState","get","query","setQuery","type","size","name","value","autocomplete","autoFocus","placeholder","onChange","e","target","Movies","setMovies","setSearchParams","useEffect","searchMovies","getMovies","data","results","newMovies","length","toast","preventDefault","formQuery","elements","search","toLowerCase","trim","BASE_URL","API_KEY","page","path","axios","getMovieById","getMovieDetails","Error"],"sourceRoot":""}